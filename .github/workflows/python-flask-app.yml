name: Flask Application CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint code
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Test app initialization
      run: |
        # Tạo thư mục templates cơ bản cho testing
        mkdir -p templates
        echo "<!DOCTYPE html><html><body><h1>Test</h1></body></html>" > templates/index.html
        echo "<!DOCTYPE html><html><body><h1>Test</h1></body></html>" > templates/result.html
        
        # Kiểm tra xem app có khởi tạo được không
        python -c "import main; print('Flask app initialized successfully')"

  deploy-to-vps:
    needs: build-and-test  # Chỉ deploy sau khi build và test thành công
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - uses: actions/checkout@v3

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add host key
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to VPS
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
        APP_DIR: ${{ secrets.APP_DIR }}
      run: |
        # Tạo một script tạm để chạy lệnh trên VPS
        cat > deploy.sh << 'EOL'
        #!/bin/bash
        cd $APP_DIR
        
        # Pull latest code (nếu đang sử dụng git trên VPS)
        if [ -d ".git" ]; then
          git pull
        else
          # Hoặc tạo thư mục mới nếu chưa có
          mkdir -p $APP_DIR
        fi
        
        # Đảm bảo có virtualenv
        if [ ! -d "venv" ]; then
          python3 -m venv venv
        fi
        
        # Cập nhật dependencies
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        
        # Đảm bảo thư mục templates tồn tại
        mkdir -p templates
        
        # Khởi động lại service (nếu đang dùng systemd)
        sudo systemctl restart flask-tracking-app.service || echo "Service not found, skipping restart"
        
        # Hoặc khởi động với tmux/screen nếu không dùng systemd
        if ! pgrep -f "gunicorn main:app"; then
          # Kill tiến trình cũ nếu có
          pkill -f "gunicorn main:app" || echo "No process to kill"
          # Khởi động gunicorn
          cd $APP_DIR && source venv/bin/activate && \
          nohup gunicorn main:app -b 0.0.0.0:5000 --workers 3 >> app.log 2>&1 &
        fi
        EOL
        
        # Sao chép các files lên VPS
        scp -r ./* $VPS_USERNAME@$VPS_HOST:$APP_DIR/
        
        # Sao chép script lên và chạy
        scp deploy.sh $VPS_USERNAME@$VPS_HOST:/tmp/
        ssh $VPS_USERNAME@$VPS_HOST "chmod +x /tmp/deploy.sh && /tmp/deploy.sh"